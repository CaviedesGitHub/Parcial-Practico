{
	"info": {
		"_postman_id": "3a68bb4d-fe04-4148-9d1a-29e5ec571494",
		"name": "Tiendas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20359132",
		"_collection_link": "https://www.postman.com/lively-sunset-217782/workspace/calculadora/collection/20359132-3a68bb4d-fe04-4148-9d1a-29e5ec571494?action=share&source=collection_link&creator=20359132"
	},
	"item": [
		{
			"name": "Crear Tienda Valida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"data = pm.response.json()\r",
							"pm.globals.set(\"tienda_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Tienda1\",\r\n    \"ciudad\": \"BOG\",\r\n    \"direccion\": \"Direccion Tienda 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": [
				{
					"name": "Crear Tienda Valida",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Cultura Arabe\",\r\n    \"descripcion\": \"Descripción de cultura arabe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"id\": \"48a9ab90-1276-11ed-861d-0242ac120002\",\r\n    \"nombre\": \"Tienda1\",\r\n    \"ciudad\": \"BOG\",\r\n    \"direccion\":\"Dirección Tienda1\"\r\n}"
				}
			]
		},
		{
			"name": "Crear Tienda Invalida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"   pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The value for the city field is not valid. It must be 3 characters.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nombre\": \"Tienda2\",\r\n  \"ciudad\": \"BUCARAMANGA\",\r\n  \"direccion\":\"Dirección Tienda2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": [
				{
					"name": "Crear Tienda Invalida",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 400,\r\n   \"message\": \"The value for the city field is not valid. It must be 3 characters.\"\r\n}"
				}
			]
		},
		{
			"name": "Obtener todas las tiendas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of stores > ' + 0, function () {\r",
							"   var data = pm.response.json()\r",
							"   pm.expect(data.length).to.greaterThan(0)\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": [
				{
					"name": "Obtener todas las tiendas",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "[\r\n    {\r\n        \"id\": \"610fbffb-bbb0-47af-84a4-960fa0044cea\",\r\n        \"nombre\": \"Tienda1\",\r\n        \"Ciudad\": \"BOG\",\r\n        \"direccion\": \"Direccion Tienda1\",\r\n        \"productos\": [\r\n            {\r\n                \"id\":\"8a5ee9d9-388d-4d35-98ec-373fb3e2b396\",\r\n                \"nombre\": \"Producto1\",\r\n                \"precio\": 5000,\r\n                \"tipo\": \"Perecedero\",\r\n            },\r\n            {\r\n                \"id\":\"32706236-5157-47c8-97f8-8f1a9357e9ac\",\r\n                \"nombre\": \"Producto2\",\r\n                \"precio\": 100,\r\n                \"tipo\": \"No perecedero\",\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": \"cb511426-cc85-44bc-a5a3-3be3d681ae44\",\r\n        \"nombre\": \"Tienda2\",\r\n        \"Ciudad\": \"BUC\",\r\n        \"direccion\": \"Direccion Tienda2\",\r\n        \"productos\": []\r\n    }\r\n]"
				}
			]
		},
		{
			"name": "Obtener una tienda",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stores/{{tienda_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores",
						"{{tienda_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Obtener una tienda",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stores/{{tienda_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores",
								"{{tienda_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"id\": \"610fbffb-bbb0-47af-84a4-960fa0044cea\",\r\n    \"nombre\": \"Tienda1\",\r\n    \"Ciudad\": \"BOG\",\r\n    \"direccion\": \"Direccion Tienda1\",\r\n    \"productos\": [\r\n        {\r\n            \"id\":\"8a5ee9d9-388d-4d35-98ec-373fb3e2b396\",\r\n            \"nombre\": \"Producto1\",\r\n            \"precio\": 5000,\r\n            \"tipo\": \"Perecedero\",\r\n        },\r\n        {\r\n            \"id\":\"32706236-5157-47c8-97f8-8f1a9357e9ac\",\r\n            \"nombre\": \"Producto2\",\r\n            \"precio\": 100,\r\n            \"tipo\": \"No perecedero\",\r\n        }\r\n    ]"
				}
			]
		},
		{
			"name": "Obtener una tienda invalida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stores/{{tiendainvalida_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores",
						"{{tiendainvalida_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Obtener una tienda invalida",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stores/{{tiendainvalida_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores",
								"{{tiendainvalida_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The store with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Actualizar una tienda",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Nuevo nombre Tienda1\",\r\n    \"ciudad\": \"BOG\",\r\n    \"direccion\": \"Nueva direccion Tienda1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stores/{{tienda_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores",
						"{{tienda_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Actualizar una tienda",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Nuevo nombre Tienda1\",\r\n    \"ciudad\": \"BOG\",\r\n    \"direccion\": \"Nueva direccion Tienda1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/stores/{{tienda_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores",
								"{{tienda_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"id\": \"48a9ab90-1276-11ed-861d-0242ac120002\",\r\n    \"nombre\": \"Nuevo nombre Tienda1\",\r\n    \"ciudad\": \"BOG\",\r\n    \"direccion\": \"Nueva direccion Tienda1\"\r\n}"
				}
			]
		},
		{
			"name": "Actualizar una tienda que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Nuevo nombre Tienda1\",\r\n    \"ciudad\": \"BOG\",\r\n    \"direccion\": \"Nueva direccion Tienda1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stores/{{tiendainvalida_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores",
						"{{tiendainvalida_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Actualizar una tienda que no existe",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Nuevo nombre Tienda1\",\r\n    \"ciudad\": \"BOG\",\r\n    \"direccion\": \"Nueva direccion Tienda1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/stores/{{tiendainvalida_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores",
								"{{tiendainvalida_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The store with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Borrar una tienda",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stores/{{tienda_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores",
						"{{tienda_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Borrar una tienda",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stores/{{tienda_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores",
								"{{tienda_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Borrar una tienda que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stores/{{tiendainvalida_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores",
						"{{tiendainvalida_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Borrar una tienda que no existe",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stores/{{tiendainvalida_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores",
								"{{tiendainvalida_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n   \"statusCode\": 404,\r\n   \"message\": \"The store with the given id was not found\"\r\n}"
				}
			]
		}
	]
}